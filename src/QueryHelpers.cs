using EPiServer.Find.Api.Querying;
using EPiServer.Find.Api.Querying.Queries;
using EPiServer.Find.Tracing;
using System.Linq;
using System.Text.RegularExpressions;

namespace EPiServer.Find
{

    public static class QueryHelpers
    {

        public static readonly Regex SpaceTabsRegex = new Regex(@"/\\s+/", RegexOptions.Compiled);
        public static readonly Regex TermsAndQuotedTermsRegex = new Regex(@"([\w-&´'`]+)|([""][\s\w-&´'`]+[""])", RegexOptions.Compiled);

        // Return all terms and phrases in query
        public static string[] GetQueryPhrases(string query)
        {            
            // Replace double space, tabs with single whitespace and trim space on side
            string cleanedQuery = SpaceTabsRegex.Replace(query, " ").Trim();

            // Match single terms and quoted terms, allow -&´'` in terms, allow space between quotes and word.
            return TermsAndQuotedTermsRegex.Matches(cleanedQuery).Cast<Match>().Select(c => c.Value.Trim()).Except(new string[] { "AND", "OR", "NOT"}).Take(50).ToArray();
        }

        public static string UnescapeElasticSearchQuery(string s)
        {
            return s.Replace("\\", "");
        }

        public static string EscapeElasticSearchQuery(string s)
        {
            return s.Replace("-", "\\-");
        }     

        public static bool GetFirstQueryStringQuery(ISearchContext context, out QueryStringQuery currentQueryStringQuery, out BoolQuery currentBoolQuery)
        {
            IQuery currentQuery;

            // Check for existing bool query with possible queries within and get the first which would be the one generated by For()
            if (QueryHelpers.TryGetBoolQuery(context.RequestBody.Query, out currentBoolQuery))
            {
                currentQuery = currentBoolQuery.Should.FirstOrDefault();
            }
            else
            {
                currentQuery = context.RequestBody.Query;
            }

            switch (currentQuery)
            {
                case MinShouldMatchQueryStringQuery minShouldMatchQueryStringQuery:
                    currentQueryStringQuery = minShouldMatchQueryStringQuery;
                    return true;
                case MultiFieldQueryStringQuery multiFieldQueryStringQuery:
                    currentQueryStringQuery = multiFieldQueryStringQuery;
                    return true;
                case QueryStringQuery queryStringQuery:
                    currentQueryStringQuery = queryStringQuery;
                    return true;
                default:
                    currentQueryStringQuery = null;
                    return false;
            }
        }

        public static bool TryGetBoolQuery(IQuery query, out BoolQuery currentBoolQuery)
        {
            currentBoolQuery = query as BoolQuery;
            if (currentBoolQuery == null)
            {
                currentBoolQuery = new BoolQuery();
                return false;
            }

            return true;

        }

        /// <summary>
        /// Get query, default operator, analyzer and fields from current queryStringQuery (produced by For())
        /// </summary>
        /// <param name="currentQueryStringQuery"></param>
        /// <returns></returns>
        public static string GetQueryString(MultiFieldQueryStringQuery currentQueryStringQuery)
        {
            return (currentQueryStringQuery.Query.ToString().Trim() ?? string.Empty).ToString();
        }

        public static string GetRawQueryString(QueryStringQuery currentQueryStringQuery)
        {
            return (currentQueryStringQuery.RawQuery ?? string.Empty).Trim().ToString();
        }

        public static bool IsStringQuoted(string text)
        {
            return (text.StartsWith("\"") && text.EndsWith("\""));
        }
    }

}